{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Header","Layout","Content","Footer","GROUP_NAMES","DURATION","App","Loading","src","process","className","id","alt","style","position","top","left","transform","height","opacity","Math","abs","progress","tip","percent","status","width","TotalMessage","props","ToolTip","attr","x","y","msg","date","fontSize","moment","format","TootipArea","xScale","yScale","MARGIN_LEFT","HEIGHT","borderRadius","border","backgroundColor","transition","boxShadow","rangeByWeek","rangeByMonth","rangeByYear","weeks","conversations","filter_setDateRange","filter_dateRange","WIDTH","CONTENT_WIDTH","heatWidth","min","length","React","useState","selectedAttr","setSelectedAttr","d3","domain","conversationData","map","d","range","xScaleReverse","colorSacle","exponent","areaPath","y0","y1","curve","yScaleHeat","yScaleHeatReverse","useEffect","call","on","e","selection","daterange","filter","i","node","getAttribute","push","error","JSON","stringify","setTimeout","remove","momentDateRange","areaMaskPath","isBetween","append","onMouseMove","pageX","pageY","window","innerWidth","max","onMouseLeave","stroke","strokeWidth","fill","month","indexOf","textAnchor","fontWeight","x1","x2","y2","year","week","day","dateFloor","d3_time","floor","toDate","includes","undefined","Group","filter_setGroup","filter_group","message_tree","filter_app","radius","groupInfo","totalMsg","Object","keys","forEach","f","count","color","pie","padAngle","sortValues","sort","arc","innerRadius","outerRadius","padRadius","svg","group_names","arcs","selectAll","data","enter","each","this","_current","aLegend","text","html","index","round","event","delay","duration","attrTween","a","t","empty","historyTotMsg","document","getElementById","innerHTML","replace","tween","Apps","filter_setApp","totalMsgApp","appInfo","Q","send","receive","W","g","h","nice","yAxis","ticks","Friends","filter_friend","filter_setFriend","margin","friendInfo","hash","s","Hash","charCodeAt","friendArray","name","b","friendData","slice","friendDataHashList","xscale","yscale","xAxis","xAxisBottom","tickSizeInner","tickSizeOuter","tickFormat","select","bandwidth","group","rect","Action","friend_list","friend_group_list","Form","useForm","form","playInterval","setPlayInterval","MyForm","layout","onValuesChange","changedValue","changedKey","gutter","span","Item","label","Option","value","showSearch","getFieldValue","initialValue","setFieldsValue","app","friend","display","justifyContent","alignItems","padding","type","shape","size","icon","CaretRightOutlined","onClick","clearInterval","minDateObj","minDate","date_range","add","setInterval","isAfter","maxDate","PauseOutlined","paddingTop","move","step","ActiveTime","LEGENDWIDTH","hoursInfoSend","hoursInfoRev","weekInfoSend","weekInfoRev","rev","hoursInfo","weekInfo","xValueDay","every","Date","xScaleDay","xaxisDay","tickValues","yScaleDay","yaxisDay","xScaleWeek","xaxisWeek","yScaleWeek","yaxisWeek","svgDaySend","svgDayRev","svgWeekSend","svgWeekRev","dataAll","csvPath","setData","then","is_send","time","useData","rangeByDate","talker","hour","minute","Main","bordered","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9e6fbdc5.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as d3_time from 'd3-time';\r\nimport {Layout, Card, Row, Col, Spin, Progress, Form, Select, Button} from 'antd';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport * as moment from 'moment';\r\nimport {CaretRightOutlined, PauseOutlined, StepBackwardOutlined} from '@ant-design/icons';\r\n\r\nconst {Header, Content, Footer} = Layout;\r\nconst CONTENT_WIDTH = 1600\r\nconst ANTI_SHAKE = 0\r\nconst TRANSITION_DELAY = 0\r\nconst GROUP_NAMES = ['Friends', 'College classmates', 'Other classmates', 'Family', 'Teachers', 'Others']\r\nconst DURATION = 250;\r\n\r\nfunction App() {\r\n\r\n    function Loading() {\r\n        const progress = 100;\r\n        return (\r\n            <div>\r\n                <img src={process.env.PUBLIC_URL + 'chatting_life_logo.png'} className={'logo'} id={'loadingImg'}\r\n                     alt={'Logo'}\r\n                     style={{\r\n                         position: 'absolute',\r\n                         top: '30%',\r\n                         left: '50%',\r\n                         transform: 'translate(-50%,-50%)',\r\n                         height: '72px',\r\n                         opacity: progress < 100 ? Math.max(progress * 0.015 - 0.1, 0) :\r\n                             (-Math.abs(progress - 100) + 100) / 100\r\n                     }}/>\r\n                <Spin tip=\"Loading data...\" style={{\r\n                    position: 'absolute', top: '55%', left: '50%', transform: 'translate(-50%,-50%)',\r\n                    opacity: (-Math.abs(progress - 100) + 100) / 100\r\n                }}/>\r\n                <Progress percent={progress >= 100 ? 100 : progress} status=\"active\" style={{\r\n                    position: 'absolute',\r\n                    top: '75%',\r\n                    left: '50%',\r\n                    transform: 'translate(-50%,-50%)',\r\n                    width: '40%',\r\n                    opacity: (-Math.abs(progress - 100) + 100) / 100\r\n                }}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function useData(csvPath) {\r\n        const [dataAll, setData] = React.useState(null);\r\n        React.useEffect(() => {\r\n            if (dataAll === null) {\r\n                d3.csv(csvPath).then(data => {\r\n                    data.forEach(d => {\r\n                        d.is_send = +d.is_send;\r\n                        d.time = moment(d.time, 'x')\r\n                    });\r\n                    setData(data);\r\n                });\r\n            }\r\n        });\r\n        return dataAll;\r\n    }\r\n\r\n    function TotalMessage(props) {\r\n        function ToolTip(props) {\r\n            const {x, y, msg, date, opacity} = props.attr\r\n            const height = 70\r\n            const width = 120\r\n            return (\r\n                <div className={'tooltip'} style={{\r\n                    left: x - width - 10,\r\n                    top: y - height - 10,\r\n                    width: width,\r\n                    height: height,\r\n                    opacity: opacity,\r\n                    fontSize: 12,\r\n                }}>\r\n                    Date: {date}<br/>\r\n                    Messages: {msg}<br/>\r\n                    Week: {moment(date, 'YYYY-MM-DD').format('ddd')}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        function TootipArea(props) {\r\n            const {msg, date, opacity} = props.attr;\r\n            const xScale = props.xScale;\r\n            const yScale = props.yScale;\r\n            return (\r\n                <div style={{\r\n                    position: \"relative\",\r\n                    left: xScale(date) + MARGIN_LEFT - 6,\r\n                    top: yScale(msg) - HEIGHT - 10,\r\n                    borderRadius: \"5px\",\r\n                    border: 'white 2px solid',\r\n                    backgroundColor: '#91a8f9',\r\n                    width: 10,\r\n                    height: 10,\r\n                    opacity: opacity,\r\n                    transition: 'opacity 0.5s',\r\n                    boxShadow: '2px 2px 2px grey',\r\n                    fontSize: 12,\r\n                }}>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const {\r\n            rangeByWeek,\r\n            rangeByMonth,\r\n            rangeByYear,\r\n            weeks,\r\n            conversations,\r\n            filter_setDateRange,\r\n            filter_dateRange\r\n        } = props\r\n        const WIDTH = CONTENT_WIDTH - 100;\r\n        const HEIGHT = 200;\r\n        const MARGIN_LEFT = 25;\r\n        //const minDate = moment.min(dataAll.map(d => d.time));\r\n        const heatWidth = Math.min((WIDTH - MARGIN_LEFT) / rangeByWeek.length - 1, HEIGHT / 5 * 3 / 7)\r\n\r\n        const [selectedAttr, setSelectedAttr] = React.useState({\r\n            x: 0,\r\n            y: 0,\r\n            date: 0,\r\n            msg: 0,\r\n            opacity: 0\r\n        })\r\n\r\n        const xScale = d3.scaleBand()\r\n            .domain(conversationData.map(d => d.date))\r\n            .range([0, WIDTH - MARGIN_LEFT])\r\n        const xScaleReverse = d3.scaleQuantize()\r\n            .domain([0, WIDTH - MARGIN_LEFT])\r\n            .range(conversationData.map(d => d.date))\r\n        const colorSacle = d3.scalePow()\r\n            .domain([0, d3.max(conversationData, d => d.msg)])\r\n            .range([90, 50])\r\n            .exponent(0.5)\r\n        const yScale = d3.scaleLinear()\r\n            .domain([0, d3.max(conversationData, d => d.msg)])\r\n            .range([HEIGHT / 5, 0])\r\n        const areaPath = d3.area()\r\n            .x(d => xScale(d.date))\r\n            .y0(HEIGHT / 5)\r\n            .y1(d => yScale(d.msg))\r\n            .curve(d3.curveCardinal)\r\n            (conversationData)\r\n        const yScaleHeat = d3.scaleBand()\r\n            .domain(weeks)\r\n            .range([0, HEIGHT / 5 * 3])\r\n        const yScaleHeatReverse = d3.scaleQuantize()\r\n            .domain([0, HEIGHT / 5 * 3])\r\n            .range(weeks)\r\n\r\n\r\n        React.useEffect(() => {\r\n            d3.select('#heatmap')\r\n                .call(d3.brush()\r\n                    .on('brush', (e) => {\r\n                        const range = e.selection;\r\n                        var daterange = [];\r\n                        d3.selectAll('.heatRect')\r\n                            .filter((d, i, node) => {\r\n                                try {\r\n                                    if (node !== null && i != null && node[i] !== null &&\r\n                                        +node[i].getAttribute('x') + heatWidth >= range[0][0] &&\r\n                                        +node[i].getAttribute('x') <= range[1][0] &&\r\n                                        +node[i].getAttribute('y') + heatWidth >= range[0][1] &&\r\n                                        +node[i].getAttribute('y') <= range[1][1]) {\r\n                                        daterange.push(node[i].getAttribute('id'))\r\n                                        return true\r\n                                    }\r\n                                    return false\r\n                                } catch (error) {\r\n                                    return false\r\n                                }\r\n                            })\r\n                            .attr('fill', (d, i, node) => {\r\n                                const msg = conversations[node[i].getAttribute('id')];\r\n                                return `hsl(262,68%,${colorSacle(msg)}%)`\r\n                            });\r\n                        d3.selectAll('.heatRect')\r\n                            .filter((d, i, node) => {\r\n                                try {\r\n                                    if (node !== null && i != null && node[i] !== null &&\r\n                                        +node[i].getAttribute('x') + heatWidth >= range[0][0] &&\r\n                                        +node[i].getAttribute('x') <= range[1][0] &&\r\n                                        +node[i].getAttribute('y') + heatWidth >= range[0][1] &&\r\n                                        +node[i].getAttribute('y') <= range[1][1]) {\r\n                                        return false\r\n                                    }\r\n                                    return true\r\n                                } catch (error) {\r\n                                    return true\r\n                                }\r\n                            })\r\n                            .attr('fill', (d, i, node) => {\r\n                                const msg = conversations[node[i].getAttribute('id')];\r\n                                return `hsl(220,62%,${colorSacle(msg)}%)`\r\n                            });\r\n                        if (JSON.stringify(daterange) !== JSON.stringify(filter_dateRange)) {\r\n                            setTimeout(() => {\r\n                                filter_setDateRange(daterange)\r\n                            }, ANTI_SHAKE)\r\n                        }\r\n\r\n                    })\r\n                    .on('end', e => {\r\n                        const range = e.selection;\r\n                        var daterange = [];\r\n                        d3.selectAll('.heatRect')\r\n                            .filter((d, i, node) => {\r\n                                try {\r\n                                    if (node !== null && i != null && node[i] !== null &&\r\n                                        +node[i].getAttribute('x') + heatWidth >= range[0][0] &&\r\n                                        +node[i].getAttribute('x') <= range[1][0] &&\r\n                                        +node[i].getAttribute('y') + heatWidth >= range[0][1] &&\r\n                                        +node[i].getAttribute('y') <= range[1][1]) {\r\n                                        daterange.push(node[i].getAttribute('id'))\r\n                                        return true\r\n                                    }\r\n                                    return false\r\n                                } catch (error) {\r\n                                    return false\r\n                                }\r\n                            })\r\n                        if (daterange.length === 0) {\r\n                            setTimeout(() => {\r\n                                filter_setDateRange(null);\r\n                            }, ANTI_SHAKE)\r\n                            d3.select('#area_mask')\r\n                                .remove();\r\n                        }\r\n                    })\r\n                )\r\n            if(filter_dateRange!==null){\r\n                const momentDateRange = filter_dateRange.map(d => moment(d, 'YYYY-MM-DD'))\r\n                const areaMaskPath = d3.area()\r\n                    .x(d => xScale(d.date))\r\n                    .y0(HEIGHT / 5)\r\n                    .y1(d => {\r\n                        return moment(d.date, 'YYYY-MM-DD').isBetween(\r\n                            moment.min(momentDateRange),\r\n                            moment.max(momentDateRange)\r\n                        ) ? yScale(d.msg) : HEIGHT / 5\r\n                    })\r\n                    .curve(d3.curveCardinal)\r\n                    (conversationData);\r\n                d3.select('#area_mask')\r\n                    .remove();\r\n                d3.select('#group_area')\r\n                    .append('path')\r\n                    .attr('d', areaMaskPath)\r\n                    .attr('fill', '#8c5ae0')\r\n                    .attr('id', 'area_mask');\r\n            }\r\n        })\r\n\r\n\r\n        return (\r\n            <>\r\n                <svg width={WIDTH + heatWidth / 2} height={HEIGHT}>\r\n                    <g transform={`translate(${MARGIN_LEFT},${0})`} id={'group_area'}\r\n                       onMouseMove={e => {\r\n                           setSelectedAttr({\r\n                               x: e.pageX,\r\n                               y: e.pageY,\r\n                               date: xScaleReverse(e.pageX - (window.innerWidth - WIDTH) / 2),\r\n                               msg: conversations[xScaleReverse(e.pageX - (Math.max((window.innerWidth - WIDTH) / 2, 0)))],\r\n                               opacity: 1\r\n                           })\r\n                       }}\r\n                       onMouseLeave={(e) => setSelectedAttr({\r\n                           x: e.pageX,\r\n                           y: e.pageY,\r\n                           date: 0,\r\n                           msg: 0,\r\n                           opacity: 0\r\n                       })}>\r\n                        <rect height={HEIGHT / 5} width={WIDTH - MARGIN_LEFT + heatWidth / 2} stroke={'black'}\r\n                              strokeWidth={0.5}\r\n                              fill={'white'}/>\r\n                        <path d={areaPath} fill={'#84ABFC'} id={'areaPath'}/>\r\n                        {\r\n                            rangeByMonth.map(d => {\r\n                                const month = moment(d).format('MMM')\r\n                                const date = moment(d).format('YYYY-MM-DD')\r\n                                return (\r\n                                    <g id={rangeByMonth.indexOf(d)}>\r\n                                        <text transform={`translate(${xScale(date)},${HEIGHT / 5 + 15})`}\r\n                                              fontSize={11}\r\n                                              textAnchor={'middle'} fontWeight={100} id={date + 'text'}>\r\n                                            {month}\r\n                                        </text>\r\n                                        <line transform={`translate(${xScale(date)},${HEIGHT / 5})`} x1={0} x2={0}\r\n                                              y1={0} y2={2} stroke={'black'} strokeWidth={0.5} id={date + 'line'}/>\r\n                                    </g>\r\n                                )\r\n                            })\r\n                        }\r\n                        {\r\n                            rangeByYear.map(d => {\r\n                                const year = moment(d).format('YYYY')\r\n                                const date = moment(d).format('YYYY-MM-DD')\r\n                                return (\r\n                                    <text transform={`translate(${xScale(date)},${HEIGHT / 5 + 30})`} fontSize={11}\r\n                                          textAnchor={'middle'} fontWeight={100} id={date}>\r\n                                        {year}\r\n                                    </text>\r\n                                )\r\n                            })\r\n                        }\r\n                    </g>\r\n                    <g transform={`translate(${MARGIN_LEFT},${HEIGHT / 5 * 2})`}>\r\n                        <rect height={HEIGHT / 5 * 3} width={WIDTH - MARGIN_LEFT + heatWidth / 2} stroke={'black'}\r\n                              strokeWidth={0.5}\r\n                              fill={'white'}/>\r\n                        <g id={'heatmap'} onMouseMove={e => {\r\n                            const week = weeks.indexOf(yScaleHeatReverse(e.pageY - 214)) + 1\r\n                            const date = moment(\r\n                                xScaleReverse(e.pageX - (window.innerWidth - WIDTH) / 2 + heatWidth / 3), 'YYYY-MM-DD'\r\n                            ).day(week).format('YYYY-MM-DD');\r\n                            setSelectedAttr({\r\n                                x: e.pageX,\r\n                                y: e.pageY,\r\n                                date: date,\r\n                                msg: conversations[date],\r\n                                opacity: 1\r\n                            })\r\n                        }}\r\n                           onMouseLeave={(e) => setSelectedAttr({\r\n                               x: e.pageX,\r\n                               y: e.pageY,\r\n                               date: 0,\r\n                               msg: 0,\r\n                               opacity: 0\r\n                           })}>\r\n                            {\r\n                                conversationData.map(d => {\r\n                                    const week = moment(d.date).format('ddd')\r\n                                    const dateFloor = moment(d3_time.timeMonday.floor(moment(d.date).toDate())).format('YYYY-MM-DD')\r\n                                    const date = moment(d.date).format('YYYY-MM-DD')\r\n                                    return (\r\n                                        <rect width={heatWidth}\r\n                                              height={heatWidth}\r\n                                              className={'heatRect'}\r\n                                              fill={filter_dateRange === null || !filter_dateRange.includes(d.date)\r\n                                                  ? `hsl(220,62%,${colorSacle(d.msg)}%)` : `hsl(262,68%,${colorSacle(d.msg)}%)`}\r\n                                              x={xScale(dateFloor) === undefined ? -100 : xScale(dateFloor) - heatWidth / 3}\r\n                                              y={yScaleHeat(week) + 2}\r\n                                              id={date}\r\n                                        />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </g>\r\n                        {\r\n                            weeks.map(week => {\r\n                                return (\r\n                                    <text transform={`translate(-4,${yScaleHeat(week) + 10})`} fontSize={11}\r\n                                          textAnchor={'end'} fontWeight={100} id={week}>\r\n                                        {week}\r\n                                    </text>\r\n                                )\r\n                            })\r\n                        }\r\n                    </g>\r\n                </svg>\r\n                <ToolTip attr={selectedAttr}/>\r\n                <TootipArea attr={selectedAttr} xScale={xScale} yScale={yScale}/>\r\n            </>\r\n        )\r\n    }\r\n\r\n    function Group(props) {\r\n        const {\r\n            filter_setGroup,\r\n            filter_group,\r\n            filter_dateRange,\r\n            message_tree,\r\n            filter_app\r\n        } = props\r\n        const WIDTH = 450;\r\n        const HEIGHT = 250;\r\n        const radius = Math.min(WIDTH, HEIGHT) / 2;\r\n        let groupInfo = {};\r\n        let totalMsg = 0\r\n        Object.keys(message_tree).forEach(d => { //date, string format\r\n            if (d !== 'count' && (filter_dateRange === null || filter_dateRange.includes(d))) {\r\n                Object.keys(message_tree[d]).forEach(e => {//app\r\n                    if (e !== 'count' && (filter_app === null || filter_app === e)) {\r\n                        Object.keys(message_tree[d][e]).forEach(f => {//group\r\n                            if (f !== 'count') {\r\n                                if (groupInfo[f] === undefined) {\r\n                                    groupInfo[f] = message_tree[d][e][f].count;\r\n                                } else {\r\n                                    groupInfo[f] += message_tree[d][e][f].count;\r\n                                }\r\n                                totalMsg += message_tree[d][e][f].count;\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        React.useEffect(() => {\r\n\r\n            let color = [\r\n                '#6e9dfc',\r\n                '#83cacb',\r\n                '#86cb79',\r\n                '#f1d754',\r\n                '#d9697b',\r\n                '#a175e6'\r\n            ];\r\n            let pie = d3.pie().padAngle(.2)\r\n                .sortValues(null)\r\n                .sort(null)\r\n            let arc = d3.arc()\r\n                .innerRadius(radius - 40)\r\n                .outerRadius(radius - 20)\r\n                .padRadius(10);\r\n\r\n            let svg = d3.select('#group_svg_g')\r\n\r\n            let group_names = GROUP_NAMES\r\n            const arcs = pie(group_names.map(d => {\r\n                return groupInfo[d]\r\n            }))\r\n            let arcVal = {}\r\n            let path = svg.selectAll(\"path\")\r\n                .data(arcs)\r\n                .enter()\r\n                .append(\"path\")\r\n                .attr(\"fill\", function (d, i) {\r\n                    return color[i];\r\n                })\r\n                .attr(\"d\", arc)\r\n                .each(function (d, i) {\r\n                    this._current = d;\r\n                    const aLegend = svg.append('g')\r\n                        .attr('transform', `translate(200,${20 * i - 60})`)\r\n                    aLegend.append('rect')\r\n                        .attr('width', 15)\r\n                        .attr('height', 15)\r\n                        .attr('fill', color[i])\r\n                    aLegend.append('text')\r\n                        .attr('transform', 'translate(20,9)')\r\n                        .attr('font-size', 12)\r\n                        .attr('font-weight', 150)\r\n                        .text(group_names[+i])\r\n                })\r\n                .on('mousemove', function (d, e) {\r\n                    d3.select('.group_tooltip')\r\n                        .remove();\r\n                    d3.select('#group_tooltip')\r\n                        .append('div')\r\n                        .style('position', 'fixed')\r\n                        .style('left', `${d.pageX + 20}px`)\r\n                        .style('top', `${d.pageY + 20}px`)\r\n                        .style('padding', '10px')\r\n                        .attr('class', 'group_tooltip')\r\n                        .html(group_names[e.index] + '<br/>' + e.data ? `${e.data} messages,\r\n                        ${Math.round(e.data / totalMsg * 10000) / 100}%` : 'No message');\r\n                })\r\n                .on('mouseout', function (d) {\r\n                    d3.select('.group_tooltip')\r\n                        .remove();\r\n                })\r\n                .on('click', function (event, data) {\r\n                    filter_setGroup(group_names[data.index])\r\n                })\r\n\r\n            d3.select('#group_background')\r\n                .on('click', () => {\r\n                    filter_setGroup(null)\r\n                })\r\n\r\n            svg.selectAll(\"path\")\r\n                .data(arcs)\r\n                .transition().delay(TRANSITION_DELAY).duration(DURATION * 3)\r\n                .attrTween(\"d\", arcTween)\r\n                .attr('fill', (d, i) => {\r\n                    if (filter_group === null) {\r\n                        return color[i]\r\n                    } else if (filter_group === group_names[i]) {\r\n                        return color[i]\r\n                    }\r\n                    return 'lightgrey'\r\n                });\r\n            svg.selectAll(\"rect\")\r\n                .transition().delay(TRANSITION_DELAY).duration(DURATION * 3)\r\n                .attr('fill', (d, i) => {\r\n                    if (filter_group === null) {\r\n                        return color[i]\r\n                    } else if (filter_group === group_names[i]) {\r\n                        return color[i]\r\n                    }\r\n                    return 'lightgrey'\r\n                });\r\n\r\n            function arcTween(a) {\r\n                var i = d3.interpolate(this._current, a);\r\n                this._current = i(0);\r\n                return function (t) {\r\n                    return arc(i(t));\r\n                };\r\n            }\r\n\r\n            if (d3.select('#group_svg .central_text text').empty()) {\r\n                d3.select('#group_svg .central_text')\r\n                    .append('text')\r\n                    .text('Total Message')\r\n                    .attr('transform', 'translate(0,-5)')\r\n                    .attr('font-size', 12)\r\n                    .attr('font-weight', 180)\r\n                    .attr('text-anchor', 'middle')\r\n            }\r\n            let count = d3.select('#group_svg .central_text #text_count');\r\n            if (count.empty()) {\r\n                d3.select('#group_svg .central_text')\r\n                    .append('text')\r\n                    .attr('id', 'text_count')\r\n                    .attr('font-size', 32)\r\n                    .attr('font-weight', 300)\r\n                    .attr('transform', 'translate(0,45)')\r\n                    .attr('text-anchor', 'middle')\r\n                    .text('0')\r\n            }\r\n            count = d3.select('#group_svg .central_text #text_count');\r\n            const historyTotMsg = +document.getElementById('text_count').innerHTML.replace(',', '')\r\n\r\n            count.transition().duration(DURATION * 3)\r\n                .tween('text', function () {\r\n                    let i = d3.interpolateNumber(historyTotMsg, totalMsg)\r\n                    return function (t) {\r\n                        this.innerHTML = d3.format(',')(Math.round(i(t)))\r\n                    }\r\n                })\r\n        })\r\n        return (\r\n            <>\r\n                <div id={'group_tooltip'}></div>\r\n                <svg width={WIDTH} height={HEIGHT} id={'group_svg'}>\r\n                    <rect id={'group_background'} width={WIDTH} height={HEIGHT} fill={'#ffffff'}/>\r\n                    <g className={'group_svg'} transform={`translate(${radius + 10},${radius})`}/>\r\n                    <g id={'group_svg_g'} transform={`translate(${radius},${radius})`}/>\r\n                    <g className={'central_text'} transform={`translate(${radius},${radius * 0.82})`}/>\r\n                </svg>\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n    function Apps(props) {\r\n        const {\r\n            filter_app,\r\n            filter_setApp,\r\n            filter_dateRange,\r\n            message_tree,\r\n            totalMsgApp,\r\n            filter_group\r\n        } = props\r\n        const WIDTHRAW = 200\r\n        const LEGENDWIDTH = 10\r\n        const WIDTH = WIDTHRAW - 50;\r\n        const HEIGHT = 250;\r\n        const marginTop = 0;\r\n        const marginBottom = 20;\r\n        let appInfo = {Q: {send: 0, receive: 0}, W: {send: 0, receive: 0}};\r\n        Object.keys(message_tree).forEach(d => { //date, string format\r\n            if (d !== 'count' && (filter_dateRange === null || filter_dateRange.includes(d))) {\r\n                Object.keys(message_tree[d]).forEach(e => {//app\r\n                    if (e !== 'count') {\r\n                        Object.keys(message_tree[d][e]).forEach(f => {//group\r\n                            if (f !== 'count' && (filter_group === null || filter_group === f)) {\r\n                                Object.keys(message_tree[d][e][f]).forEach(g => {//friend\r\n                                    if (g !== 'count') {\r\n                                        Object.keys(message_tree[d][e][f][g]).forEach(h => {//time\r\n                                            if (h !== 'count') {\r\n                                                Object.keys(message_tree[d][e][f][g][h]).forEach(i => {//is_send\r\n                                                    if (i !== 'count') {\r\n                                                        if (appInfo[e] === undefined) {\r\n                                                            appInfo[e] = {}\r\n                                                        }\r\n                                                        if (appInfo[e][i] === undefined) {\r\n                                                            appInfo[e][i] = message_tree[d][e][f][g][h][i].count;\r\n                                                        } else {\r\n                                                            appInfo[e][i] += message_tree[d][e][f][g][h][i].count;\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        // console.log(appInfo, totalMsgApp)\r\n        React.useEffect(() => {\r\n\r\n            let yScale = d3.scaleLinear()\r\n                .range([0, HEIGHT - marginTop - marginBottom])\r\n                .domain([0, Math.max(appInfo.Q.send + appInfo.Q.receive, appInfo.W.send + appInfo.W.receive)])\r\n                .nice()\r\n            let yAxis = d3.axisLeft(\r\n                d3.scaleLinear()\r\n                    .range([HEIGHT - marginTop - marginBottom, 10])\r\n                    .domain([0, Math.max(appInfo.Q.send + appInfo.Q.receive, appInfo.W.send + appInfo.W.receive)])\r\n                    .nice()\r\n            ).ticks(5)\r\n            d3.select('#app_QS')\r\n                .on('mousemove', function (d, e) {\r\n                    d3.select('.app_tooltip')\r\n                        .remove();\r\n                    d3.select('#app_tooltip')\r\n                        .append('div')\r\n                        .style('position', 'fixed')\r\n                        .style('left', `${d.pageX + 20}px`)\r\n                        .style('top', `${d.pageY + 20}px`)\r\n                        .style('padding', '10px')\r\n                        .attr('class', 'app_tooltip')\r\n                        .html(`Total: ${appInfo.Q.send + appInfo.Q.receive}<br/>Send: ${appInfo.Q.send}`);\r\n                })\r\n                .on('mouseout', function (d) {\r\n                    d3.select('.app_tooltip')\r\n                        .remove();\r\n                })\r\n                .transition().duration(DURATION)\r\n                .attr('x', WIDTH / 4)\r\n                .attr('y', HEIGHT - marginBottom - yScale(appInfo.Q.send))\r\n                .attr('width', WIDTH / 4)\r\n                .attr('height', yScale(appInfo.Q.send))\r\n                .attr('fill', (filter_app === null || filter_app === 'Q') ? '#84abfc' : 'lightgrey')\r\n\r\n            d3.select('#app_QR')\r\n                .on('mousemove', function (d, e) {\r\n                    d3.select('.app_tooltip')\r\n                        .remove();\r\n                    d3.select('#app_tooltip')\r\n                        .append('div')\r\n                        .style('position', 'fixed')\r\n                        .style('left', `${d.pageX + 20}px`)\r\n                        .style('top', `${d.pageY + 20}px`)\r\n                        .style('padding', '10px')\r\n                        .attr('class', 'app_tooltip')\r\n                        .html(`Total: ${appInfo.Q.send + appInfo.Q.receive}<br/>Receive: ${appInfo.Q.receive}`);\r\n                })\r\n                .on('mouseout', function (d) {\r\n                    d3.select('.app_tooltip')\r\n                        .remove();\r\n                })\r\n                .transition().duration(DURATION)\r\n                .attr('x', WIDTH / 4)\r\n                .attr('y', HEIGHT - marginBottom - yScale(appInfo.Q.receive) - yScale(appInfo.Q.send))\r\n                .attr('width', WIDTH / 4)\r\n                .attr('height', yScale(appInfo.Q.receive))\r\n                .attr('fill', (filter_app === null || filter_app === 'Q') ? '#6dc0c2' : 'lightgrey')\r\n\r\n            d3.select('#app_WS')\r\n                .on('mousemove', function (d, e) {\r\n                    d3.select('.app_tooltip')\r\n                        .remove();\r\n                    d3.select('#app_tooltip')\r\n                        .append('div')\r\n                        .style('position', 'fixed')\r\n                        .style('left', `${d.pageX + 20}px`)\r\n                        .style('top', `${d.pageY + 20}px`)\r\n                        .style('padding', '10px')\r\n                        .attr('class', 'app_tooltip')\r\n                        .html(`Total: ${appInfo.W.send + appInfo.W.receive}<br/>Send: ${appInfo.W.send}`);\r\n                })\r\n                .on('mouseout', function (d) {\r\n                    d3.select('.app_tooltip')\r\n                        .remove();\r\n                })\r\n                .transition().duration(DURATION)\r\n                .attr('x', WIDTH / 4 * 3 - WIDTH / 6)\r\n                .attr('y', HEIGHT - marginBottom - yScale(appInfo.W.send))\r\n                .attr('width', WIDTH / 4)\r\n                .attr('height', yScale(appInfo.W.send))\r\n                .attr('fill', (filter_app === null || filter_app === 'W') ? '#84abfc' : 'lightgrey')\r\n\r\n            d3.select('#app_WR')\r\n                .on('mousemove', function (d, e) {\r\n                    d3.select('.app_tooltip')\r\n                        .remove();\r\n                    d3.select('#app_tooltip')\r\n                        .append('div')\r\n                        .style('position', 'fixed')\r\n                        .style('left', `${d.pageX + 20}px`)\r\n                        .style('top', `${d.pageY + 20}px`)\r\n                        .style('padding', '10px')\r\n                        .attr('class', 'app_tooltip')\r\n                        .html(`Total: ${appInfo.W.send + appInfo.W.receive}<br/>Receive: ${appInfo.W.receive}`);\r\n                })\r\n                .on('mouseout', function (d) {\r\n                    d3.select('.app_tooltip')\r\n                        .remove();\r\n                })\r\n                .transition().duration(DURATION)\r\n                .attr('x', WIDTH / 4 * 3 - WIDTH / 6)\r\n                .attr('y', HEIGHT - marginBottom - yScale(appInfo.W.receive) - yScale(appInfo.W.send))\r\n                .attr('width', WIDTH / 4)\r\n                .attr('height', yScale(appInfo.W.receive))\r\n                .attr('fill', (filter_app === null || filter_app === 'W') ? '#6dc0c2' : 'lightgrey')\r\n            d3.select('#apps_yAxis')\r\n                .transition().duration(DURATION)\r\n                .call(yAxis);\r\n            d3.select('#app_qq')\r\n                .on('click', () => {\r\n                    filter_setApp('Q')\r\n                });\r\n            d3.select('#app_wechat')\r\n                .on('click', () => {\r\n                    filter_setApp('W')\r\n                })\r\n            d3.select('#apps_background')\r\n                .on('click', () => {\r\n                    filter_setApp(null)\r\n                })\r\n        })\r\n        return (\r\n            <>\r\n                <svg id={'apps'} width={WIDTHRAW} height={HEIGHT}>\r\n                    <rect id={'apps_background'} width={WIDTHRAW} height={HEIGHT} fill={'white'}/>\r\n                    <g id=\"app_bar\" transform={`translate(${10},${5})`}>\r\n                        <g id={'apps_yAxis'} transform={`translate(${WIDTH / 4},0)`} opacity={0.8}/>\r\n                        <g id={'app_qq'}>\r\n                            <rect x=\"50\" y=\"0\" width={HEIGHT / 6} height=\"0.0\"\r\n                                  fill=\"#6DC0C2\" className=\"app_rect\" id={'app_QS'}/>\r\n                            <rect x=\"50\" y=\"0\" width={HEIGHT / 6} height=\"0.0\"\r\n                                  fill=\"#84ABFC\" className=\"app_rect\" id={'app_QR'}/>\r\n                        </g>\r\n                        <g id={'app_wechat'}>\r\n                            <rect x=\"100\" y=\"0\" width={HEIGHT / 6} height=\"0\"\r\n                                  fill=\"#6DC0C2\" className=\"app_rect\" id={'app_WS'}/>\r\n                            <rect x=\"100\" y=\"0\" width=\"41.666666666666664\" height=\"0.0\" fill=\"#84ABFC\"\r\n                                  className=\"app_rect\" id={'app_WR'}/>\r\n                        </g>\r\n                        <text x={WIDTH * (3 / 4 + 1 / 10 - 1 / 6) + 2} y={HEIGHT - marginBottom / 2} fontSize=\"11\"\r\n                              fontWeight=\"300\" textAnchor=\"middle\"\r\n                              className=\"app_rect\">WeChat\r\n                        </text>\r\n                        <text x={WIDTH * (1 / 4 + 1 / 10)} y={HEIGHT - marginBottom / 2} fontSize=\"11\"\r\n                              fontWeight=\"300\" textAnchor=\"middle\"\r\n                              className=\"app_rect\">QQ\r\n                        </text>\r\n                        <g id={'legend'} transform={`translate(${WIDTH - 15},${HEIGHT / 2})`}>\r\n                            <g id={'rev_leg'}>\r\n                                <rect width={LEGENDWIDTH} height={LEGENDWIDTH} fill={'#9cbec2'}/>\r\n                                <text fontSize={10} transform={'translate(20,10)'}>Receive</text>\r\n                            </g>\r\n                            <g id={'send_leg'} transform={'translate(0,20)'}>\r\n                                <rect width={LEGENDWIDTH} height={LEGENDWIDTH} fill={'#99a6f6'}/>\r\n                                <text fontSize={10} transform={'translate(20,10)'}>Send</text>\r\n                            </g>\r\n                        </g>\r\n                    </g>\r\n                </svg>\r\n                <div id={'app_tooltip'}/>\r\n            </>\r\n        )\r\n    }\r\n\r\n    function Friends(props) {\r\n        const {\r\n            filter_friend,\r\n            filter_setFriend,\r\n            filter_dateRange,\r\n            message_tree,\r\n            totalMsgApp,\r\n            filter_group,\r\n            filter_app\r\n        } = props\r\n        const WIDTH = 750;\r\n        const HEIGHT = 500;\r\n        const DURATION = 250;\r\n        const margin = {\r\n            top: 30,\r\n            left: 100,\r\n            right: 50,\r\n            bottom: 0\r\n        }\r\n        let color14 = [\r\n            '#6e9dfb',\r\n            '#b3d8ec',\r\n            '#99d3d4',\r\n            '#a4debf',\r\n            '#86cb79',\r\n            '#bce089',\r\n            '#f3dd73',\r\n            '#daa878',\r\n            '#d9697b',\r\n            '#ca81cf',\r\n            '#8d59e1',\r\n            '#9b88ed',\r\n            '#564dcb',\r\n            '#8c8ee7'\r\n        ];\r\n        let group_names = ['Friends', 'College classmates', 'Other classmates', 'Family', 'Teachers', 'Others']\r\n        let color = {\r\n            'Friends': '#6e9dfc',\r\n            'College classmates': '#83cacb',\r\n            'Other classmates': '#86cb79',\r\n            'Family': '#f1d754',\r\n            'Teachers': '#d9697b',\r\n            'Others': '#a175e6'\r\n        }\r\n\r\n        let friendInfo = {};\r\n        let groupInfo = {}\r\n        Object.keys(message_tree).forEach(d => { //date, string format\r\n            if (d !== 'count' && (filter_dateRange === null || filter_dateRange.includes(d))) {\r\n                Object.keys(message_tree[d]).forEach(e => {//app\r\n                    if (e !== 'count' && (filter_app === null || filter_app === e)) {\r\n                        Object.keys(message_tree[d][e]).forEach(f => {//group\r\n                            if (f !== 'count' && (filter_group === null || filter_group === f)) {\r\n                                Object.keys(message_tree[d][e][f]).forEach(g => {//friend\r\n                                    if (g !== 'count') {\r\n                                        if (friendInfo[g] === undefined) {\r\n                                            friendInfo[g] = message_tree[d][e][f][g].count\r\n                                        } else {\r\n                                            friendInfo[g] += message_tree[d][e][f][g].count\r\n                                        }\r\n                                        groupInfo[g] = f\r\n                                    }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        function hash(s) {\r\n            let Hash = 0;\r\n            for (let i = 0; i < s.length && i < 8; i++) {\r\n                Hash += s.charCodeAt(i) * (10 ** i);\r\n            }\r\n            return Hash\r\n        }\r\n\r\n        let friendArray = []\r\n        Object.keys(friendInfo).forEach(name => {\r\n            friendArray.push([name, friendInfo[name]])\r\n        })\r\n        friendArray.sort((a, b) => {\r\n            return -a[1] + b[1]\r\n        })\r\n        const friendData = friendArray.slice(0, 15).filter(d => {\r\n            return d[0] !== ''\r\n        }).slice(0, 10)\r\n        const friendDataHashList = friendData.map(d => {\r\n            return hash(d[0])\r\n        })\r\n        React.useEffect(() => {\r\n                let xscale = d3.scaleLinear()\r\n                    .range([0, WIDTH - margin.right - margin.left])\r\n                    .domain([0, d3.max(friendData, d => d[1])])\r\n                    .nice()\r\n                let yscale = d3.scaleBand()\r\n                    .range([0, HEIGHT - margin.top - margin.bottom])\r\n                    .domain(friendData.map(d => d[0]))\r\n                let xAxis = d3.axisTop(xscale)\r\n                let xAxisBottom = d3.axisBottom(xscale)\r\n                    .tickSizeInner(HEIGHT - margin.top - margin.bottom)\r\n                    .tickSizeOuter(0)\r\n                    .tickFormat(d3.format(\"\"));\r\n                let svg = d3.select('#friends g')\r\n                    .attr('transform', `translate(0,${margin.top})`)\r\n\r\n                function update() {\r\n                    xscale.domain([0, d3.max(friendData, d => d[1])])\r\n                    yscale.domain(friendData.map(d => d[0]))\r\n                    svg.selectAll('.bar')\r\n                        .each(function () {\r\n                            if (!friendDataHashList.includes(hash(d3.select(this).attr('id').slice(4)))) {\r\n                                let group = d3.select(this)//group\r\n                                    .transition().delay(TRANSITION_DELAY)\r\n                                    .remove();\r\n                                group.select('rect')\r\n                                    .transition().delay(TRANSITION_DELAY)\r\n                                    .duration(DURATION * 3)\r\n                                    .attr('width', HEIGHT * 1.3)\r\n                                    .attr('y', 0)\r\n                                    .remove();\r\n                            }\r\n                        })\r\n                    friendData.forEach(d => {\r\n                        let bar = svg.select('#bar_' + hash(d[0]))\r\n                        if (bar.empty()) {\r\n                            let g = svg.append('g')\r\n                                .attr('class', 'bar')\r\n                                .attr('id', 'bar_' + hash(d[0]))\r\n                            g.append('text')\r\n                                .attr('font-size', 12)\r\n                                .attr('class', 'name')\r\n                                .text(d[0])\r\n                                .attr('x', 0)\r\n                                .attr('y', HEIGHT - margin.top - margin.bottom)\r\n                            g.append('text')\r\n                                .attr('font-size', 12)\r\n                                .attr('class', 'count')\r\n                                .text(0)\r\n                                .attr('x', xscale(d[1]) + 10 + margin.left)\r\n                                .attr('y', HEIGHT - margin.top - margin.bottom)\r\n                            g.append('rect')\r\n                                .data(d)\r\n                                .attr('fill', (filter_friend === groupInfo[d[0]] || filter_friend === null) ? color[groupInfo[d[0]]] : 'lightgrey')\r\n                                .attr('height', yscale.bandwidth() * 0.8)\r\n                                .attr('width', xscale(d[1]))\r\n                                .attr('x', margin.left)\r\n                                .attr('y', HEIGHT - margin.top - margin.bottom)\r\n\r\n\r\n                        }\r\n                        let group = svg.select('#bar_' + hash(d[0]))\r\n                        let rect = group.select('rect')\r\n                        let name = group.select('.name')\r\n                        let count = group.select('.count')\r\n                        group.transition().delay(TRANSITION_DELAY)\r\n                            .duration(DURATION * 3)\r\n                            .attr('width', xscale(d[1]))\r\n                            .attr('y', yscale(d[0]));\r\n                        rect.on('click', (event, data) => {\r\n                            filter_setFriend(data)\r\n                        }).transition().delay(TRANSITION_DELAY)\r\n                            .duration(DURATION * 3)\r\n                            .attr('height', yscale.bandwidth() * 0.8)\r\n                            .attr('width', xscale(d[1]))\r\n                            .attr('y', yscale(d[0]))\r\n                            .attr('fill', d => {\r\n                                return (filter_friend === d || filter_friend === null) ? color[groupInfo[d]] : 'lightgrey'\r\n                            });\r\n                        name.transition().delay(TRANSITION_DELAY)\r\n                            .duration(DURATION * 3)\r\n                            .attr('y', yscale(d[0]) + yscale.bandwidth() * 0.5);\r\n                        count.transition().delay(TRANSITION_DELAY)\r\n                            .duration(DURATION * 3)\r\n                            .tween('text', function () {\r\n                                let i = d3.interpolateNumber(+this.innerHTML, d[1])\r\n                                return function (t) {\r\n                                    this.innerHTML = Math.round(i(t))\r\n                                }\r\n                            })\r\n                            .attr('y', yscale(d[0]) + yscale.bandwidth() * 0.5)\r\n                            .attr('x', xscale(d[1]) + 10 + margin.left);\r\n                    })\r\n                    svg.select('.xaxis')\r\n                        .transition()\r\n                        .duration(DURATION * 3)\r\n                        .call(xAxis);\r\n\r\n                    svg.select('.xaxisBottom')\r\n                        .transition()\r\n                        .duration(DURATION * 3)\r\n                        .call(xAxisBottom);\r\n                }\r\n\r\n                update()\r\n                d3.select('#friends_bg')\r\n                    .on('click', () => {\r\n                        filter_setFriend(null)\r\n                    })\r\n            }\r\n        )\r\n        return (<>\r\n            <svg id={'friends'} width={WIDTH} height={HEIGHT}>\r\n                <rect id={'friends_bg'} width={WIDTH} height={HEIGHT} fill={'white'}/>\r\n                <g>\r\n                    <g className={'xaxis'} transform={`translate(${margin.left},-10)`}/>\r\n                    <g className={'xaxisBottom'} transform={`translate(${margin.left},-10)`} opacity={0.1}/>\r\n                    <g className={'yaxis'}/>\r\n                </g>\r\n            </svg>\r\n        </>)\r\n    }\r\n\r\n    function Action(props) {\r\n        const {\r\n            filter_dateRange, filter_setDateRange,\r\n            filter_group, filter_setGroup,\r\n            filter_app, filter_setApp,\r\n            filter_friend, filter_setFriend,\r\n            message_tree, totalMsgApp,\r\n            friend_list, friend_group_list\r\n        } = props\r\n        //const [subDURATION, SET_subDURATION] = React.useState(200)\r\n        const WIDTH = 750;\r\n        const HEIGHT = 250; //900-38\r\n        const margin = {\r\n            top: 30,\r\n            left: 0,\r\n            right: 100,\r\n            bottom: 30\r\n        }\r\n        const [form] = Form.useForm()\r\n        const [playInterval, setPlayInterval] = React.useState()\r\n        React.useEffect(() => {\r\n            form.setFieldsValue({\r\n                group: filter_group === null ? 'all' : filter_group,\r\n                app: filter_app === null ? 'all' : filter_app,\r\n                friend: filter_friend === null ? 'all' : filter_friend,\r\n            })\r\n        })\r\n\r\n        function MyForm(props) {\r\n            return (<>\r\n                <Form form={props.form} layout={'vertical'} onValuesChange={(changedValue) => {\r\n                    let changedKey = Object.keys(changedValue)[0]\r\n                    if (changedKey === 'group') {\r\n                        filter_setGroup(changedValue[changedKey] === 'all' ? null : changedValue[changedKey])\r\n                    }\r\n                    if (changedKey === 'app') {\r\n                        filter_setApp(changedValue[changedKey] === 'all' ? null : changedValue[changedKey])\r\n                    }\r\n                    if (changedKey === 'friend') {\r\n                        filter_setFriend(changedValue[changedKey] === 'all' ? null : changedValue[changedKey])\r\n                    }\r\n                }}>\r\n                    <Row gutter={16}>\r\n                        <Col span={14}>\r\n                            <Form.Item name={'group'} label={'Group'}>\r\n                                <Select>\r\n                                    <Select.Option value='all' key='all'>All</Select.Option>\r\n                                    {GROUP_NAMES.map(d => {\r\n                                        return (\r\n                                            <Select.Option value={d} key={d}>{d}</Select.Option>\r\n                                        )\r\n                                    })}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span={10}>\r\n                            <Form.Item name={'app'} label={'App'}>\r\n                                <Select>\r\n                                    <Select.Option value={'all'}>All</Select.Option>\r\n                                    <Select.Option value={'W'}>WeChat</Select.Option>\r\n                                    <Select.Option value={'Q'}>QQ</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter={16}>\r\n                        <Col span={24}>\r\n                            <Form.Item name={'friend'} label={'Friend'}>\r\n                                <Select showSearch>\r\n                                    <Select.Option value='all' key='all'>All</Select.Option>\r\n                                    {\r\n                                        GROUP_NAMES.includes(props.form.getFieldValue('group')) ?\r\n                                            friend_group_list[props.form.getFieldValue('group')].map(d => {\r\n                                                    return (<Select.Option value={d} key={d}>{d}</Select.Option>)\r\n                                                }\r\n                                            )\r\n                                            :\r\n                                            friend_list.map(d => {\r\n                                                    return (<Select.Option value={d} key={d}>{d}</Select.Option>)\r\n                                                }\r\n                                            )\r\n                                    }\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter={16}>\r\n                        <Col span={12}>\r\n                            <Form.Item name={'duration'} label={'Duration'} initialValue={'28'}>\r\n                                <Select>\r\n                                    <Select.Option value='7'>7 days</Select.Option>\r\n                                    <Select.Option value='14'>14 days</Select.Option>\r\n                                    <Select.Option value='28'>28 days</Select.Option>\r\n                                    <Select.Option value='56'>56 days</Select.Option>\r\n                                    <Select.Option value='112'>112 days</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <Form.Item name={'step'} label={'Step'} initialValue={'1'}>\r\n                                <Select>\r\n                                    <Select.Option value={'1'}>1 day</Select.Option>\r\n                                    <Select.Option value={'2'}>2 days</Select.Option>\r\n                                    <Select.Option value={'3'}>3 days</Select.Option>\r\n                                    <Select.Option value={'4'}>4 days</Select.Option>\r\n                                    <Select.Option value={'5'}>5 days</Select.Option>\r\n                                    <Select.Option value={'6'}>6 days</Select.Option>\r\n                                    <Select.Option value={'7'}>7 days</Select.Option>\r\n                                    <Select.Option value={'14'}>14 days</Select.Option>\r\n                                    <Select.Option value={'28'}>28 days</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </>)\r\n        }\r\n\r\n        return (<>\r\n            <Row>\r\n                <Col span={10}>\r\n                    <MyForm form={form}/>\r\n                </Col>\r\n                <Col span={14}>\r\n                    <Row>\r\n                        <Col span={24} style={{\r\n                            display: 'flex', justifyContent: \"space-around\", alignItems: 'center',\r\n                            padding: '50px 100px 0 100px'\r\n                        }}>\r\n                            <Button type=\"primary\" shape=\"circle\" size='large' icon={<CaretRightOutlined/>}\r\n                                    onClick={() => {\r\n                                        clearInterval(playInterval)\r\n                                        let minDateObj = moment(minDate.toDate())\r\n                                        let date_range = d3.timeDay\r\n                                            .range(\r\n                                                minDate.toDate(),\r\n                                                minDateObj.add(+form.getFieldValue('duration'), 'd').toDate()\r\n                                            )\r\n                                        date_range = date_range.map(d => {\r\n                                            return moment(d).format('YYYY-MM-DD')\r\n                                        })\r\n                                        filter_setDateRange(date_range)\r\n\r\n                                        setPlayInterval(\r\n                                            setInterval(() => {\r\n                                                date_range = date_range.map(d => {\r\n                                                    return moment(d, 'YYYY-MM-DD').add(+form.getFieldValue('step'), 'd').format('YYYY-MM-DD')\r\n                                                })\r\n                                                filter_setDateRange(date_range)\r\n                                                if (moment(date_range[date_range.length - 1],'YYYY-MM-DD').isAfter(maxDate)) {\r\n                                                    clearInterval(playInterval)\r\n                                                    //todo: this doesnt seem to work\r\n                                                }\r\n                                            }, 3 * DURATION)\r\n                                        )\r\n                                    }}/>\r\n                            <Button shape=\"circle\" size='large' icon={<PauseOutlined/>} onClick={() => {\r\n                                clearInterval(playInterval)\r\n                            }}/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={24} style={{\r\n                            display: 'flex', justifyContent: \"center\", alignItems: 'center',\r\n                            paddingTop: '50px '\r\n                        }}>\r\n                            <Button type=\"link\" onClick={() => {\r\n                                d3.select('#heatmap').call(d3.brush().move, null);\r\n                                d3.select('#area_mask').remove();\r\n                                filter_setApp(null);\r\n                                filter_setGroup(null);\r\n                                filter_setFriend(null);\r\n                                filter_setDateRange(null);\r\n                                form.setFieldsValue({duration: '56', step: '28'})\r\n                            }}>Clear Selection</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </>)\r\n    }\r\n\r\n    function ActiveTime(props) {\r\n        const {\r\n            filter_dateRange,\r\n            filter_group,\r\n            filter_app,\r\n            filter_friend,\r\n            message_tree,\r\n            totalMsgApp\r\n        } = props\r\n        const WIDTH = 750;\r\n        const HEIGHT = 500; //900-38\r\n        const margin = {\r\n            top: 30,\r\n            left: 40,\r\n            right: 100,\r\n            bottom: 30\r\n        }\r\n        const LEGENDWIDTH = 10;\r\n\r\n        let hoursInfoSend = d3.range(48).map(d => {\r\n            return 0\r\n        })\r\n        let hoursInfoRev = d3.range(48).map(d => {\r\n            return 0\r\n        })\r\n        let weekInfoSend = d3.range(7).map(d => {\r\n            return 0\r\n        })\r\n        let weekInfoRev = d3.range(7).map(d => {\r\n            return 0\r\n        })\r\n        Object.keys(message_tree).forEach(d => { //date, string format\r\n            if (d !== 'count' && (filter_dateRange === null || filter_dateRange.includes(d))) {\r\n                Object.keys(message_tree[d]).forEach(e => {//app\r\n                    if (e !== 'count' && (filter_app === null || filter_app === e)) {\r\n                        Object.keys(message_tree[d][e]).forEach(f => {//group\r\n                            if (f !== 'count' && (filter_group === null || filter_group === f)) {\r\n                                Object.keys(message_tree[d][e][f]).forEach(g => {//friend\r\n                                    if (g !== 'count' && (filter_friend === null || filter_friend === g)) {\r\n                                        Object.keys(message_tree[d][e][f][g]).forEach(h => {//time\r\n                                            if (h !== 'count') {\r\n                                                const send = message_tree[d][e][f][g][h].send === undefined ? 0 : message_tree[d][e][f][g][h].send.count\r\n                                                const rev = message_tree[d][e][f][g][h].receive === undefined ? 0 : message_tree[d][e][f][g][h].receive.count\r\n                                                hoursInfoSend[h] += send\r\n                                                hoursInfoRev[h] += rev\r\n                                                weekInfoSend[((moment(d, 'YYYY-MM-DD').format('e')) + 6) % 7] += send\r\n                                                weekInfoRev[((moment(d, 'YYYY-MM-DD').format('e')) + 6) % 7] += rev\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        let hoursInfo = d3.cross(hoursInfoRev, hoursInfoSend, (a, b) => a + b)\r\n        let weekInfo = d3.cross(weekInfoSend, weekInfoRev, (a, b) => a + b)\r\n        let xValueDay = d3.timeMinute.every(30).range(new Date(2000, 0, 1), new Date(2000, 0, 2))\r\n            .map(d => {\r\n                return moment(d).format('HH:mm')\r\n            })\r\n\r\n        React.useEffect(() => {\r\n            let xScaleDay = d3.scaleBand()\r\n                .domain(xValueDay)\r\n                .range([0, WIDTH - margin.left - margin.right])\r\n                .padding(0.3)\r\n            let xaxisDay = d3.axisBottom(xScaleDay)\r\n                .tickValues(xScaleDay.domain().filter(function (d, i) {\r\n                    return !(i % 6)\r\n                }))\r\n            let yScaleDay = d3.scaleLinear()\r\n                .domain([d3.max(hoursInfo), 0])\r\n                .range([HEIGHT / 2 - margin.top - margin.left, 0])\r\n                .nice()\r\n            let yaxisDay = d3.axisLeft(\r\n                d3.scaleLinear()\r\n                    .domain([0, d3.max(hoursInfo)])\r\n                    .range([HEIGHT / 2 - margin.top - margin.left, 0])\r\n                    .nice()\r\n            ).ticks(5)\r\n            let xScaleWeek = d3.scaleBand()\r\n                .domain(weeks)\r\n                .range([0, WIDTH - margin.left - margin.right])\r\n                .padding(0.6)\r\n            let xaxisWeek = d3.axisBottom(xScaleWeek)\r\n            let yScaleWeek = d3.scaleLinear()\r\n                .domain([d3.max(weekInfo), 0])\r\n                .range([HEIGHT / 2 - margin.top - margin.left, 0])\r\n                .nice()\r\n            let yaxisWeek = d3.axisLeft(\r\n                d3.scaleLinear()\r\n                    .domain([0, d3.max(weekInfo)])\r\n                    .range([HEIGHT / 2 - margin.top - margin.left, 0])\r\n                    .nice()\r\n            ).ticks(5)\r\n            let svgDaySend = d3.select('#g_day #send')\r\n            let svgDayRev = d3.select('#g_day #rev')\r\n            let svgWeekSend = d3.select('#g_week #send')\r\n            let svgWeekRev = d3.select('#g_week #rev')\r\n\r\n            svgDaySend.selectAll('rect')\r\n                .data(hoursInfoSend)\r\n                .enter()\r\n                .append('rect')\r\n                .attr('x', (d, i) => {\r\n                    return xScaleDay(xValueDay[i])\r\n                })\r\n                .attr('y', (d) => {\r\n                    return HEIGHT / 2 - yScaleDay(d) - margin.bottom\r\n                })\r\n                .attr('width', xScaleDay.bandwidth())\r\n                .attr('height', (d) => {\r\n                    return yScaleDay(d)\r\n                })\r\n                .attr('fill', '#91a8f9')\r\n            svgDaySend.selectAll('rect')\r\n                .transition().duration(DURATION)\r\n                .attr('x', (d, i) => {\r\n                    return xScaleDay(xValueDay[i])\r\n                })\r\n                .attr('y', (d) => {\r\n                    return HEIGHT / 2 - yScaleDay(d) - margin.bottom\r\n                })\r\n                .attr('width', xScaleDay.bandwidth())\r\n                .attr('height', (d) => {\r\n                    return yScaleDay(d)\r\n                });\r\n            svgDayRev.selectAll('rect')\r\n                .data(hoursInfoRev)\r\n                .enter()\r\n                .append('rect')\r\n                .attr('x', (d, i) => {\r\n                    return xScaleDay(xValueDay[i])\r\n                })\r\n                .attr('y', (d, i) => {\r\n                    return HEIGHT / 2 - yScaleDay(d) - margin.bottom - yScaleDay(hoursInfoSend[i])\r\n                })\r\n                .attr('width', xScaleDay.bandwidth())\r\n                .attr('height', (d) => {\r\n                    return yScaleDay(d)\r\n                })\r\n                .attr('fill', '#8bbfc2')\r\n            svgDayRev.selectAll('rect')\r\n                .transition().duration(DURATION)\r\n                .attr('x', (d, i) => {\r\n                    return xScaleDay(xValueDay[i])\r\n                })\r\n                .attr('y', (d, i) => {\r\n                    return HEIGHT / 2 - yScaleDay(d) - margin.bottom - yScaleDay(hoursInfoSend[i])\r\n                })\r\n                .attr('width', xScaleDay.bandwidth())\r\n                .attr('height', (d) => {\r\n                    return yScaleDay(d)\r\n                });\r\n\r\n            svgWeekSend.selectAll('rect')\r\n                .data(weekInfoSend)\r\n                .enter()\r\n                .append('rect')\r\n                .attr('x', (d, i) => {\r\n                    return xScaleWeek(weeks[i])\r\n                })\r\n                .attr('y', (d) => {\r\n                    return HEIGHT / 2 - yScaleWeek(d) - margin.bottom\r\n                })\r\n                .attr('width', xScaleWeek.bandwidth())\r\n                .attr('height', (d) => {\r\n                    return yScaleWeek(d)\r\n                })\r\n                .attr('fill', '#91a8f9')\r\n            svgWeekSend.selectAll('rect')\r\n                .transition().duration(DURATION)\r\n                .attr('x', (d, i) => {\r\n                    return xScaleWeek(weeks[i])\r\n                })\r\n                .attr('y', (d) => {\r\n                    return HEIGHT / 2 - yScaleWeek(d) - margin.bottom\r\n                })\r\n                .attr('width', xScaleWeek.bandwidth())\r\n                .attr('height', (d) => {\r\n                    return yScaleWeek(d)\r\n                });\r\n            svgWeekRev.selectAll('rect')\r\n                .data(weekInfoRev)\r\n                .enter()\r\n                .append('rect')\r\n                .attr('x', (d, i) => {\r\n                    return xScaleWeek(weeks[i])\r\n                })\r\n                .attr('y', (d, i) => {\r\n                    return HEIGHT / 2 - yScaleWeek(d) - margin.bottom - yScaleWeek(weekInfoSend[i])\r\n                })\r\n                .attr('width', xScaleWeek.bandwidth())\r\n                .attr('height', (d) => {\r\n                    return yScaleWeek(d)\r\n                })\r\n                .attr('fill', '#8bbfc2')\r\n            svgWeekRev.selectAll('rect')\r\n                .transition().duration(DURATION)\r\n                .attr('x', (d, i) => {\r\n                    return xScaleWeek(weeks[i])\r\n                })\r\n                .attr('y', (d, i) => {\r\n                    return HEIGHT / 2 - yScaleWeek(d) - margin.bottom - yScaleWeek(weekInfoSend[i])\r\n                })\r\n                .attr('width', xScaleWeek.bandwidth())\r\n                .attr('height', (d) => {\r\n                    return yScaleWeek(d)\r\n                });\r\n\r\n            d3.select('#g_day #xaxis')\r\n                .call(xaxisDay)\r\n            d3.select('#g_week #xaxis')\r\n                .call(xaxisWeek)\r\n            d3.select('#g_day #yaxis')\r\n                .transition()\r\n                .duration(DURATION)\r\n                .call(yaxisDay);\r\n            d3.select('#g_week #yaxis')\r\n                .transition()\r\n                .duration(DURATION)\r\n                .call(yaxisWeek);\r\n        })\r\n\r\n        return (<>\r\n            <svg width={WIDTH} height={HEIGHT}>\r\n                <g id={'g_day'} transform={`translate(${margin.left},${0})`}>\r\n                    <text transform={`translate(${-margin.left},${15})`} fontSize={13}>By day</text>\r\n                    <g id={'send'}/>\r\n                    <g id={'rev'}/>\r\n                    <g id={'xaxis'} transform={`translate(0,${HEIGHT / 2 - margin.bottom})`}/>\r\n                    <g id={'yaxis'} transform={`translate(0,${margin.top * 1.3})`}/>\r\n                    <g id={'legend'} transform={`translate(${WIDTH - margin.right - margin.left + 10},${HEIGHT / 4})`}>\r\n                        <g id={'send_leg'}>\r\n                            <rect width={LEGENDWIDTH} height={LEGENDWIDTH} fill={'#9cbec2'}/>\r\n                            <text fontSize={10} transform={'translate(20,10)'}>Receive</text>\r\n                        </g>\r\n                        <g id={'send_leg'} transform={'translate(0,20)'}>\r\n                            <rect width={LEGENDWIDTH} height={LEGENDWIDTH} fill={'#99a6f6'}/>\r\n                            <text fontSize={10} transform={'translate(20,10)'}>Send</text>\r\n                        </g>\r\n                    </g>\r\n                </g>\r\n                <g id={'g_week'} transform={`translate(${margin.left},${HEIGHT / 2})`}>\r\n                    <text transform={`translate(${-margin.left},${15})`} fontSize={13}>By week</text>\r\n                    <g id={'send'}/>\r\n                    <g id={'rev'}/>\r\n                    <g id={'xaxis'} transform={`translate(0,${HEIGHT / 2 - margin.bottom})`}/>\r\n                    <g id={'yaxis'} transform={`translate(0,${margin.top * 1.3})`}/>\r\n                    <g id={'legend'} transform={`translate(${WIDTH - margin.right - margin.left + 10},${HEIGHT / 4})`}>\r\n                        <g id={'send_leg'}>\r\n                            <rect width={LEGENDWIDTH} height={LEGENDWIDTH} fill={'#9cbec2'}/>\r\n                            <text fontSize={10} transform={'translate(20,10)'}>Receive</text>\r\n                        </g>\r\n                        <g id={'send_leg'} transform={'translate(0,20)'}>\r\n                            <rect width={LEGENDWIDTH} height={LEGENDWIDTH} fill={'#99a6f6'}/>\r\n                            <text fontSize={10} transform={'translate(20,10)'}>Send</text>\r\n                        </g>\r\n                    </g>\r\n                </g>\r\n            </svg>\r\n        </>)\r\n    }\r\n\r\n    const dataAll = useData(process.env.PUBLIC_URL + 'data.csv');\r\n\r\n    if (!dataAll) {\r\n        return <Loading/>;\r\n    }\r\n    ;\r\n    const minDate = moment('2019-06-07', 'YYYY-MM-DD')\r\n    const maxDate = moment.max(dataAll.map(d => d.time));\r\n    const rangeByDate = d3_time.timeDay.range(minDate.toDate(), maxDate.toDate(), 1) //js.Date() Object\r\n    const rangeByWeek = d3_time.timeMonday.range(minDate.toDate(), maxDate.toDate(), 1)\r\n    const rangeByMonth = d3_time.timeMonth.range(minDate.toDate(), maxDate.toDate(), 1)\r\n    const rangeByYear = d3_time.timeYear.range(minDate.toDate(), maxDate.toDate(), 1)\r\n    const weeks = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n    let conversations = {}\r\n    rangeByDate.forEach(d => {\r\n        conversations[moment(d).format('YYYY-MM-DD')] = 0\r\n    })\r\n    dataAll.forEach(d => {\r\n        if (d.time.isBetween(minDate, maxDate)) {\r\n            conversations[moment(d.time).format('YYYY-MM-DD')] += 1\r\n        }\r\n    })\r\n    let conversationData = [];\r\n    Object.keys(conversations).forEach((d) => conversationData.push({\r\n        date: d,\r\n        msg: conversations[d]\r\n    }))\r\n\r\n    let friend_list = []\r\n    let friend_group_list = {}\r\n    const message_tree = {}\r\n    dataAll.forEach(d => {\r\n        //date\r\n        if (message_tree[d.time.format('YYYY-MM-DD')] === undefined) {\r\n            message_tree[d.time.format('YYYY-MM-DD')] = {count: 1}\r\n        } else {\r\n            message_tree[d.time.format('YYYY-MM-DD')].count += 1\r\n        }\r\n        //app\r\n        if (message_tree[d.time.format('YYYY-MM-DD')][d.app] === undefined) {\r\n            message_tree[d.time.format('YYYY-MM-DD')][d.app] = {count: 1}\r\n        } else {\r\n            message_tree[d.time.format('YYYY-MM-DD')][d.app].count += 1\r\n        }\r\n        if (message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group] === undefined) {\r\n            message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group] = {count: 1}\r\n            if (friend_group_list[d.group] === undefined) {\r\n                friend_group_list[d.group] = []\r\n            }\r\n        } else {\r\n            message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group].count += 1\r\n        }\r\n        if (message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group][d.talker] === undefined) {\r\n            message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group][d.talker] = {count: 1}\r\n            if (!friend_list.includes(d.talker)) {\r\n                friend_list.push(d.talker)\r\n                friend_group_list[d.group].push(d.talker)\r\n            }\r\n        } else {\r\n            message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group][d.talker].count += 1\r\n        }\r\n        if (message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group][d.talker][d.time.hour() * 2 + (d.time.minute() < 30)] === undefined) {\r\n            message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group][d.talker][d.time.hour() * 2 + (d.time.minute() < 30)] = {count: 1}\r\n        } else {\r\n            message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group][d.talker][d.time.hour() * 2 + (d.time.minute() < 30)].count += 1\r\n        }\r\n        if (message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group][d.talker][d.time.hour() * 2 + (d.time.minute() < 30)][d.is_send ? 'send' : 'receive'] === undefined) {\r\n            message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group][d.talker][d.time.hour() * 2 + (d.time.minute() < 30)][d.is_send ? 'send' : 'receive'] = {count: 1}\r\n        } else {\r\n            message_tree[d.time.format('YYYY-MM-DD')][d.app][d.group][d.talker][d.time.hour() * 2 + (d.time.minute() < 30)][d.is_send ? 'send' : 'receive'].count += 1\r\n        }\r\n    })\r\n    let totalMsgApp = {Q: 0, W: 0}\r\n    Object.keys(message_tree).forEach(d => { //date, string format\r\n        if (d !== 'count') {\r\n            Object.keys(message_tree[d]).forEach(e => {//app\r\n                if (e !== 'count') {\r\n                    totalMsgApp[e] += message_tree[d][e].count\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n    function Main() {\r\n        const [filter_dateRange, filter_setDateRange] = React.useState(null);\r\n        const [filter_group, filter_setGroup] = React.useState(null);\r\n        const [filter_app, filter_setApp] = React.useState(null);\r\n        const [filter_friend, filter_setFriend] = React.useState(null);\r\n        return (\r\n            <Layout>\r\n                <Header className={'header'}>\r\n                    <img src={process.env.PUBLIC_URL + 'chatting_life_logo.png'} className={'logo'} alt={'logo'}/>\r\n                </Header>\r\n                <Content className={'content'} style={{width: CONTENT_WIDTH + 'px'}}>\r\n                    <Row gutter={[16, 16]}>\r\n                        <Col span={24}>\r\n                            <Card bordered={false}>\r\n                                <p>Total Message</p>\r\n                                <TotalMessage\r\n                                    rangeByWeek={rangeByWeek} rangeByMonth={rangeByMonth}\r\n                                    rangeByYear={rangeByYear} weeks={weeks} conversations={conversations}\r\n                                    filter_dateRange={filter_dateRange} filter_setDateRange={filter_setDateRange}\r\n                                />\r\n                            </Card>\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <Row gutter={[16, 16]}>\r\n                                <Col span={16}>\r\n                                    <Card bordered={false}>\r\n                                        <p>Groups</p>\r\n                                        <Group filter_group={filter_group} filter_setGroup={filter_setGroup}\r\n                                               message_tree={message_tree} filter_dateRange={filter_dateRange}\r\n                                               filter_app={filter_app}/>\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col span={8}>\r\n                                    <Card bordered={false}>\r\n                                        <p>Apps</p>\r\n                                        <Apps filter_app={filter_app} filter_setApp={filter_setApp}\r\n                                              filter_dateRange={filter_dateRange} filter_group={filter_group}\r\n                                              message_tree={message_tree} totalMsgApp={totalMsgApp}/>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                            <br/>\r\n                            <Row gutter={[16, 16]}>\r\n                                <Col span={24}>\r\n                                    <Card bordered={false}>\r\n                                        <p>Top Friends</p>\r\n                                        <Friends filter_friend={filter_friend} filter_setFriend={filter_setFriend}\r\n                                                 filter_dateRange={filter_dateRange} filter_group={filter_group}\r\n                                                 message_tree={message_tree} totalMsgApp={totalMsgApp}\r\n                                                 filter_app={filter_app}/>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <Row gutter={[16, 16]}>\r\n                                <Col span={24}>\r\n                                    <Card bordered={false}>\r\n                                        <p>Action Center</p>\r\n                                        <Action filter_dateRange={filter_dateRange}\r\n                                                filter_setDateRange={filter_setDateRange}\r\n                                                filter_group={filter_group} filter_setGroup={filter_setGroup}\r\n                                                filter_app={filter_app} filter_setApp={filter_setApp}\r\n                                                filter_friend={filter_friend} filter_setFriend={filter_setFriend}\r\n                                                message_tree={message_tree} totalMsgApp={totalMsgApp}\r\n                                                friend_list={friend_list} friend_group_list={friend_group_list}/>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                            <br/>\r\n                            <Row gutter={[16, 16]}>\r\n                                <Col span={24}>\r\n                                    <Card bordered={false}>\r\n                                        <p>Active Time</p>\r\n                                        <ActiveTime filter_dateRange={filter_dateRange} filter_group={filter_group}\r\n                                                    filter_app={filter_app} filter_friend={filter_friend}\r\n                                                    message_tree={message_tree} totalMsgApp={totalMsgApp}/>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Content>\r\n                <Footer>\r\n                    <div className={'footer'}>\r\n                        @Harry Lee | DATS-SHU 235 Information Visualization Course Project\r\n                    </div>\r\n                </Footer>\r\n            </Layout>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Main/>\r\n    )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}